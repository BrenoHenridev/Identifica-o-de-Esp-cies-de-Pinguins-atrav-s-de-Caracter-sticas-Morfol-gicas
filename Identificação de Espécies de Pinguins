import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

sns.set(style="whitegrid")
plt.rcParams['figure.figsize'] = (10, 6)
pd.set_option('display.max_columns', 50)

dados_pinguins = {
    'species': ['Adelie', 'Adelie', 'Gentoo', 'Chinstrap', 'Gentoo'],
    'island': ['Torgersen', 'Torgersen', 'Biscoe', 'Dream', 'Biscoe'],
    'bill_length_mm': [39.1, 39.5, 45.1, 46.5, 47.3],
    'bill_depth_mm': [18.7, 17.4, 14.2, 17.9, 13.8],
    'flipper_length_mm': [181, 186, 210, 215, 208],
    'body_mass_g': [3750, 3800, 5200, 5400, 5100],
    'sex': ['Male', 'Female', 'Male', 'Female', 'Male']
}

df = pd.DataFrame(dados_pinguins)

def preparar_dados(df):
    df = df.dropna()
    df = pd.get_dummies(df, columns=['island', 'sex'])
    X = df.drop('species', axis=1)
    y = df['species']
    colunas_numericas = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']
    normalizador = StandardScaler()
    X[colunas_numericas] = normalizador.fit_transform(X[colunas_numericas])
    return X, y, normalizador, colunas_numericas

X, y, normalizador, colunas_numericas = preparar_dados(df)

X_treino, X_teste, y_treino, y_teste = train_test_split(X, y, test_size=0.3, random_state=42)

arvore = DecisionTreeClassifier(max_depth=3, random_state=42)
arvore.fit(X_treino, y_treino)

previsoes = arvore.predict(X_teste)
print(f"Acurácia do modelo: {accuracy_score(y_teste, previsoes):.2%}")
print("\nDetalhes da classificação:")
print(classification_report(y_teste, previsoes))

plt.figure()
sns.heatmap(confusion_matrix(y_teste, previsoes),
            annot=True, fmt='d',
            cmap='Blues',
            xticklabels=arvore.classes_,
            yticklabels=arvore.classes_)
plt.title('Matriz de Confusão')
plt.show()

plt.figure()
pd.Series(arvore.feature_importances_, index=X.columns).sort_values().plot.barh()
plt.title('Importância das Variáveis')
plt.show()

pca = PCA(n_components=2)
X_reduzido = pca.fit_transform(X[colunas_numericas])

kmeans = KMeans(n_clusters=3, random_state=42)
grupos = kmeans.fit_predict(X_reduzido)

plt.figure()
sns.scatterplot(x=X_reduzido[:, 0], y=X_reduzido[:, 1], hue=grupos, palette='viridis', s=100)
plt.title('Agrupamento de Pinguins (via K-Means)')
plt.xlabel('PCA 1')
plt.ylabel('PCA 2')
plt.show()

def prever_novo_pinguim(amostra):
    novo_df = pd.DataFrame([amostra])
    novo_df = pd.get_dummies(novo_df)
    for coluna in X.columns:
        if coluna not in novo_df.columns:
            novo_df[coluna] = 0
    novo_df = novo_df[X.columns]
    novo_df[colunas_numericas] = normalizador.transform(novo_df[colunas_numericas])
    pred = arvore.predict(novo_df)
    prob = arvore.predict_proba(novo_df)
    return pred[0], prob

nova_amostra = {
    'island': 'Biscoe',
    'bill_length_mm': 38.2,
    'bill_depth_mm': 18.1,
    'flipper_length_mm': 185.0,
    'body_mass_g': 3950.0,
    'sex': 'Male'
}

resultado, probabilidades = prever_novo_pinguim(nova_amostra)
print(f"\nResultado da predição: {resultado}")
print("Probabilidades:")
print(dict(zip(arvore.classes_, probabilidades[0])))
